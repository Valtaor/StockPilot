-- ===============================================
-- SCRIPT DE NETTOYAGE ET R√âINSTALLATION
-- ===============================================
--
-- ‚ö†Ô∏è ATTENTION : Ce script SUPPRIME et RECR√âE les tables !
-- Utilisez-le UNIQUEMENT si vous voulez repartir de z√©ro.
--
-- Base de donn√©es : dbs1363734
--
-- ===============================================

USE dbs1363734;

-- ===============================================
-- √âTAPE 1 : SUPPRIMER LES CONTRAINTES FK DE PRODUCTS
-- ===============================================

-- Supprimer les FK si elles existent
SET @fk_exists = (
    SELECT COUNT(*)
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
    WHERE CONSTRAINT_SCHEMA = 'dbs1363734'
    AND TABLE_NAME = 'products'
    AND CONSTRAINT_NAME = 'fk_products_brand'
);

SET @sql = IF(@fk_exists > 0,
    'ALTER TABLE `products` DROP FOREIGN KEY `fk_products_brand`',
    'SELECT "FK fk_products_brand does not exist" AS message'
);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @fk_exists = (
    SELECT COUNT(*)
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
    WHERE CONSTRAINT_SCHEMA = 'dbs1363734'
    AND TABLE_NAME = 'products'
    AND CONSTRAINT_NAME = 'fk_products_product_type'
);

SET @sql = IF(@fk_exists > 0,
    'ALTER TABLE `products` DROP FOREIGN KEY `fk_products_product_type`',
    'SELECT "FK fk_products_product_type does not exist" AS message'
);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @fk_exists = (
    SELECT COUNT(*)
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
    WHERE CONSTRAINT_SCHEMA = 'dbs1363734'
    AND TABLE_NAME = 'products'
    AND CONSTRAINT_NAME = 'fk_products_model'
);

SET @sql = IF(@fk_exists > 0,
    'ALTER TABLE `products` DROP FOREIGN KEY `fk_products_model`',
    'SELECT "FK fk_products_model does not exist" AS message'
);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- ===============================================
-- √âTAPE 2 : SUPPRIMER LES COLONNES DE PRODUCTS
-- ===============================================

-- Supprimer les colonnes si elles existent
SET @column_exists = (
    SELECT COUNT(*)
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = 'dbs1363734'
    AND TABLE_NAME = 'products'
    AND COLUMN_NAME = 'brand_id'
);

SET @sql = IF(@column_exists > 0,
    'ALTER TABLE `products` DROP COLUMN `brand_id`',
    'SELECT "Column brand_id does not exist" AS message'
);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @column_exists = (
    SELECT COUNT(*)
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = 'dbs1363734'
    AND TABLE_NAME = 'products'
    AND COLUMN_NAME = 'product_type_id'
);

SET @sql = IF(@column_exists > 0,
    'ALTER TABLE `products` DROP COLUMN `product_type_id`',
    'SELECT "Column product_type_id does not exist" AS message'
);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

SET @column_exists = (
    SELECT COUNT(*)
    FROM INFORMATION_SCHEMA.COLUMNS
    WHERE TABLE_SCHEMA = 'dbs1363734'
    AND TABLE_NAME = 'products'
    AND COLUMN_NAME = 'model_id'
);

SET @sql = IF(@column_exists > 0,
    'ALTER TABLE `products` DROP COLUMN `model_id`',
    'SELECT "Column model_id does not exist" AS message'
);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;

-- ===============================================
-- √âTAPE 3 : SUPPRIMER LES TABLES
-- ===============================================

DROP TABLE IF EXISTS `models`;
DROP TABLE IF EXISTS `product_types`;
DROP TABLE IF EXISTS `brands`;

-- ===============================================
-- √âTAPE 4 : MESSAGE DE CONFIRMATION
-- ===============================================

SELECT '
‚úÖ NETTOYAGE TERMIN√â !

Les √©l√©ments suivants ont √©t√© supprim√©s :
- Table models (avec ses donn√©es)
- Table product_types (avec ses donn√©es)
- Table brands (avec ses donn√©es)
- Colonnes brand_id, product_type_id, model_id de products
- Toutes les contraintes FK associ√©es

üéØ PROCHAINE √âTAPE :
Ex√©cutez maintenant le script SCRIPT_COMPLET_REFERENCE_TABLES.sql
pour recr√©er tout proprement !
' AS RESULT;
